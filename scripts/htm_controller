#!/usr/bin/env python

from htm.lib.pomdp import GraphPolicyRunner

from htm.task import (HierarchicalTask, AbstractAction, SequentialCombination,
                      LeafCombination)
from htm.task_to_pomdp import CollaborativeAction, HTMToPOMDP
from htm.icra_scenarios import (chair_task_sequential, T_WAIT, T_COMM, C_INTR,
                                C_ERR, INF)

import rospy
from baxter_collaboration.graph_policy_controller import BaseGPController


T_FAKE = 10


class GPController(BaseGPController):

    OBJ = {
        'left-leg': 17,
        'right-leg': 26,
        'central-frame': 24,
        'top': 21,
    }
    PAST = {
        'snap': 'snapped',
        'take': 'taken',
    }
    GET = 'get'
    PASS = 'pass'
    RECOVER_GET = 'recover_get'

    def take_action(self, action):
        if action == 'wait':
            return self.action_wait()
        else:
            t, a = action.split('-', 1)
            if t == 'phy':
                return self.action_physical(a)
            elif t == 'com':
                return self.action_communicate(a)
            else:
                raise ValueError('Unknown action: {}'.format(action))

    def action_physical(self, action):
        a, o = action.split('-', 1)
        rospy.loginfo("Taking action: {} on {}".format(name, obj))
        o = self.OBJ[obj]
        if name in ['bring', 'get']:
            result = self.action_service(self.GET, o).success
            if name == 'bring':
                result = result and self.action_service(self.PASS, o).success
            rospy.loginfo("received result: " + str(result))
            if result:
                return self.NONE
            else:
                result = self.action_service(self.RECOVER_GET, o)
                if not result:
                    raise RuntimeError("Action 'recover get' failed.")
                return self.ERROR
        elif name == 'snap':
            error = self.error_sub.wait_for_msg(timeout=T_FAKE)
            return self.NO if error else self.NONE
        else:
            raise ValueError('Unkown physical action: {}'.format(name))

    def action_communicate(self, action):
        a, c, o = action.split('-', 2)
        o_name = obj.replace('-', ' ')
        if a == 'ask':
            sentence = "Have you {} the {}?".format(self.PAST[name], o_name)
        elif a == 'tell':
            sentence = "I'm going to {} the {}.".format(self.PAST[name], o_name)
        rospy.loginfo("{}ing: \"{}\"".format(a.capitalize(), sentence))
        self.say(sentence)
        s = self.answer_sub.wait_for_msg()
        if s is None:
            return self.NONE  # Question at wrong time
        elif s == 'yes':
            return self.YES
        elif s == 'no':
            return self.NO
        else:
            raise ValueError('Unknown answer: ' + s)


h2p = HTMToPOMDP(C_WAIT, C_COMM)
p = h2p.task_to_pomdp(chair_task)
pg = p.solve(method='grid', n_iterations=500)
controller = GPController(pg)
controller.run()
