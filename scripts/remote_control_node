#!/usr/bin/env python

from remote_control import Server

import rospy
from baxter_collaboration.srv import DoAction


SERVICE = '/action_provider/action_service'
OBJECT_IDS = {
    'left_leg': 17,
    'right_leg': 26,
    'central_frame': 24,
    'top': 21,
    }


def remote_message_to_action(msg):
    action, obj = msg.split(' ')
    obj_id = OBJECT_IDS[obj]
    return (action, obj_id)


class RemoteControlNode:

    name = 'remote_control'

    def __init__(self, port=5000):
        rospy.init_node(self.name)
        self.rc_port = port

    def run(self):
        rospy.wait_for_service(SERVICE)
        self.service = rospy.ServiceProxy(SERVICE, DoAction)
        with Server(port=self.rc_port, callback=self._remote_msg_cb) as rc:
	    rospy.loginfo("Started remote controle server.")
            rc.run()

    def _remote_msg_cb(self, message):
	rospy.loginfo("Received message: %s" % message)
        try:
            result = self.service(*remote_message_to_action(message))
            return result.success
        except Exception, e:
            rospy.logerr("Unable to call service: %s" % e)
	    return False


if __name__ == "__main__":
    node = RemoteControlNode()
    node.run()
